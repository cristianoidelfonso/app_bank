security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    enable_authenticator_manager: true
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            # configure the maximum login attempts
            login_throttling:
                max_attempts: 3          # per minute ...
                # interval: '15 minutes' # ... or in a custom period
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # require ROLE_ADMIN for /admin*
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # require ROLE_USER for /profile*
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: '^/banco',    roles: [ROLE_SYS_ADMIN, ROLE_ADMIN_BANCO] }
        # - { path: '^/agencia',  roles: ROLE_ADMIN_AGENCIA }
        # - { path: '^/gerente',  roles: ROLE_GERENTE }
        # - { path: '^/conta',    roles: ROLE_USER }

        # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
        # - { path: '^/banco',    roles: [IS_AUTHENTICATED_FULLY, ROLE_SYS_ADMIN, ROLE_ADMIN_BANCO] }
        # - { path: '^/agencia',  roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN_AGENCIA] }
        # - { path: '^/gerente',  roles: [IS_AUTHENTICATED_FULLY, ROLE_GERENTE] }
        # - { path: '^/conta',    roles: [IS_AUTHENTICATED_FULLY, ROLE_USER] }
    
    # https://symfony.com/doc/current/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_SYS_ADMIN:  [ROLE_ADMIN_BANCO]
        ROLE_ADMIN_BANCO: [ROLE_ADMIN_AGENCIA]
        ROLE_ADMIN_AGENCIA: [ROLE_GERENTE]
        ROLE_GERENTE: [ROLE_USER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
